doctype html
html(lang="en")
    head
        title Архитектура компьютера и операционные системы
        meta(charset="utf-8")
        meta(http-equiv="x-ua-compatible", content="ie=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="../../../common/shower/themes/ribbon/styles/screen-16x10.css")
        style(type="text/css").
            .caption {
                color: #FFF;
            }
    body.shower.list
        header.caption
            h1 Архитектура компьютера и операционные системы
            p Семинар 19. Сигналы
        section.slide#cover
            h2 Семинар 19. Сигналы
            p Архитектура компьютера и операционные системы @ ВШЭ, 2018-2019
            img.cover(src="./img/cover.jpg", alt="")
            style(type="text/css").
                #cover h2 {
                    margin: 30px 0 0;
                    color: #FFF;
                    text-align: center;
                    font-size: 70px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p {
                    margin: 10px 0 0;
                    text-align: center;
                    color: #FFF;
                    font-style: italic;
                    font-size: 20px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p a {
                    color: #FFF;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }

        section.slide
            h2 Сигналы
            ul
                li Сигнал - программное прерывание нормальной работы процесса
                li Некоторые сигналы сообщают об ошибках, таких как недопустимое обращение к памяти, другие сообщают об асинхронных событиях, таких как потеря связи с терминалом
                li Некоторые события делают нежелательным или невозможным продолжение нормальной работы процесса, такие сигналы по умолчанию завершают работу процесса. Другие сигналы, сообщающие о «безобидных» событиях, по умолчанию игнорируются
        
        section.slide
            h2 Сигналы
            ul
                li Процесс может послать сигнал другому процессу. Это позволяет, например, родительскому процессу завершить выполнение дочернего процесса
                li Обработка сигналов в системах-наследницах #[code System V] сильно отличается от таковой в семействе #[code BSD]. Однако, в #[code LINUX] за основу принята обработка в стиле #[code BSD]

        section.slide
            h2 Типы сигналов
            ul
                li #[b Ошибка] означает, что программа сделала что-то недопустимое и не может продолжить своё выполнение (например, деление на 0)
                li #[b Внешнее событие] обычно относится к операциям ввода/вывода или другим процессам (например, получение данных при асинхронных операциях)
                li #[b Явный запрос] предполагает использование функций, таких как kill, задача которых — сгенерировать сигнал

        section.slide
            h2 Типы сигналов
            ul
                li #[b Синхронные] - относится к некоторому действию в программе и генерируется и доставляется (если не заблокирован) во время этого действия (например, большинство ошибок, сигнал, посланный самому себе)
                li #[b Асинхронные] - могут приходить в непредсказуемые моменты времени

        section.slide
            h2 Генерация сигнала
            ul
                li Системный вызов #[code kill]
                li #[a(href="https://www.opennet.ru/man.shtml?topic=kill&category=2") man]
                li Если установить номер сигнала равным #[code 0], то сигнал не посылается, но все ошибки проверяются. Это можно использовать, например, для проверки существования процесса с заданным #[code pid]
                li #[code int raise(int sig);] эквивалентно #[code kill(getpid(), sig);]

        section.slide
            h2 Получение сигнала
            ul
                li После генерации сигнала он становится #[i ожидающим доставки], обычно - не продолжительное время
                li Сигнал может быть заблокированным, тогда он будет ожидать разблокировки, после чего будет доставлен немедленно
                li Получение сигнала означание выполенние определенного действия. Для некоторых (#[code SIGKILL] и #[code SIGSTOP]) действие фиксировано, но для большинства есть выбор: игнорировать, обрабатывать или действовать по умолчанию
        
        section.slide
            h2 Получение сигнала
            ul
                li Программа может задать обработчик сигнала с помощью #[code signal] или #[code sigaction]
                li Если для некоторого типа сигнала установлено игнорирование, любой сигнал такого типа будет сброшен сразу же после генерации, даже если этот тип сигналов в тот момент был заблокирован. Такой сигнал никогда не будет доставлен, даже если программа затем установит обработчик сигнала и разблокирует его

        section.slide
            h2 Получение сигнала
            ul
                li Если не установлен обработчик, и сигнал не игнорируется, то выполняется действие по умолчанию
                li Для большинства сигналов - завершить исполнение программы, для некоторых безобидных - не делать ничего
                li Сигналы, по умолчанию завершающие процесс, вызывают функцию ядра, аналогичную #[code _exit], то есть не вызываются обработчики завершения, зарегистрированные по #[code atexit], не записываются буферы дескрипторов потока #[code FILE]

        section.slide
            h2 Стандартные сигналы
            ul 
                li Имена сигналов определены в заголовочном файле #[code signal.h]
                li Макрос #[code NSIG] даёт общее количество сигналов, определённых в системе. Поскольку сигналы нумеруются последовательно, его значение на 1 больше максимального номера сигнала
                li Для получение строки, описывающей сигнал, можно использовать #[code strsignal]

        section.slide
            h2 Стандартные сигналы
            ul
                li Описание стандартных сигналов может быть найдено #[a(href="https://github.com/hseos/hseos-course/blob/master/2017/19-signal1/sem-signals.pdf") здесь]
                li Когда процесс остановлен, он не может получать сигналы, кроме #[code SIGKILL] и #[code SIGCONT]. Все посланные процессу сигналы будут сделаны ожидающими доставки
                li Когда процесс получает сигнал #[code SIGCONT], все сигналы остановки, ожидающие доставки, будут сброшены. Аналогично, когда процесс получает сигнал остановки, все сигналы #[code SIGCONT], ожидающие доставки, будут сброшены

        section.slide
            h2 Работа с множествами сигналов
            ul
                li Аргументами многих функций, работающих с сигналами, могут быть множества сигналов
                li Тип #[code sigset_t] должен использоваться для хранения множества сигналов
                li Функции для работы с множествами сигналов: #[code sigemptyset], #[code sigfillset], #[code sigaddset], #[code sigdelset], #[code sigismember]

        section.slide
            h2 Установка обработчика сигнала
            ul
                li #[a(href="https://www.opennet.ru/man.shtml?topic=signal&category=2") signal]
                li Если процесс игнорирует сигнал #[code SIGSEGV] и другие аналогичные сигналы, его поведение после ошибки неопределено
                li Игнорировать запросы пользователя, такие как #[code SIGINT] и пр. — недружественно по отношению к пользователю
                li Функция #[code signal] присутствует в стандарте #[code ANSI C], тем не менее её использование не рекомендуется по историческим причинам

        sections.slide
            h2 Установка обработчика сигнала
            ul
                li #[a(href="https://www.opennet.ru/cgi-bin/opennet/man.cgi?topic=sigaction&category=2") sigaction]
                li Позволяет в том числе определить, какое поведение (как в #[code System V] или как в #[code BSD]) использовать
        
        sections.slide
            h2 Блокирование сигналов
            ul
                li Временная блокировка сигнала с помощью #[code sigprocmask] позволяет предотвратить прерывание нормальной работы процесса в критической секции кода
                li Если работа с этой структурой не атомарна, обработчик сигнала может быть запущен, когда структура находится в нецелостном состоянии, что может приводить к самым неприятным последствиям
                li Сигнал будет доставлен после его разблокировки

        section.slide
            h2 Ожидание прихода сигналов
            ul
                li #[code pause] приостанавливает выполнение процесса до поступления сигнала, который не блокируется и не игнорируется
                li Если поступление сигнала запускает функцию обработки сигнала, которая возвращает управление в процесс, функция pause возвращается с кодом завершения #[code -1] и кодом ошибки #[code EINTR] даже в случае, когда включена семантика перезапускаемых системных вызовов
                li Однако, с #[code pause] можно получить ошибки обработки сигналов, связанные с асинхронностью их природы

        section.slide
            h2 Ожидание прихода сигналов
            ul
                li Более правильный способ - использование #[code sigprocmask] совместно с #[code sigsuspend]
                li #[sigsuspend] временно устанавливает маску блокировки сигналов на переданную ему, а затем ждет сигнал, который либо вызывает завершение процесса, либо обрабатывается процессом

        div(class="progress")
        script(src="../../../common/shower/shower.min.js")