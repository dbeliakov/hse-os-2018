doctype html
html(lang="en")
    head
        title Архитектура компьютера и операционные системы
        meta(charset="utf-8")
        meta(http-equiv="x-ua-compatible", content="ie=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="../../../common/shower/themes/ribbon/styles/screen-16x10.css")
        style(type="text/css").
            .caption {
                color: #FFF;
            }
    body.shower.list
        header.caption
            h1 Архитектура компьютера и операционные системы
            p Семинар 14. Динамическая загрузка модулей
        section.slide#cover
            h2 Семинар 14. Динамическая загрузка модулей
            p Архитектура компьютера и операционные системы @ ВШЭ, 2018-2019
            img.cover(src="./img/cover.jpg", alt="")
            style(type="text/css").
                #cover h2 {
                    margin: 30px 0 0;
                    color: #FFF;
                    text-align: center;
                    font-size: 70px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p {
                    margin: 10px 0 0;
                    text-align: center;
                    color: #FFF;
                    font-style: italic;
                    font-size: 20px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p a {
                    color: #FFF;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }

        section.slide
            h2 Позиционно-независимый код
            ul
                li Иногда бывает необходимость разместить исполняемый файл в памяти по произвольному адресу
                li Машинный код, настроенный на работу по фиксированным адресам в памяти, называется неперемещаемым (или позиционно-зависимым)
                li Такой код малопригоден для разделяемых библиотек, так как одна и та же библиотека может располагаться по разным адресам в адресном пространстве разных процессов

        section.slide
            h2 Позиционно-независимый код
            ul
                li В позиционно-независимом (PIC) коде запрещено использование абсолютных адресов. Все адреса глобальных переменных и областей данных должны вычисляться относительно текущего положения исполняемого кода
            pre
                code.
                    call    l1
                    l1:     popl    %eax
        
        section.slide
            h2 Позиционно-независимый код
            pre
                code(style="font-size: 11pt;").
                    .text
                    msg1:   .asciz  "Hello, %d!\n"
                            .align  16
                            .global func
                    func:
                            pushl   %esi            /* сразу заносим в стек второй аргумент printf */
                            call    l1              /* получаем адрес, по которому размещаемся в памяти */
                    l1:     popl    %eax
                            addl    $msg1-l1, %eax  /* прибавляем к адресу l1 смещение msg1 относительно l1 */
                            pushl   %eax            /* заносим в стек получившийся абсолютный адрес */
                            call    printf
                            addl    $8, %esp        /* чистим стек */
                            ret
        
        section.slide
            h2 Компиляция динамически подгружаемой библиотеки
            ul
                li #[code gcc -O2 -Wall -Werror -std=c11 -fPIC -DPIC -c lib.c]
                li #[code -fPIC] включает режим генерации позиционно-независимого кода
                li #[code -DPIC] устанавливает макрос #[code PIC] в значение 1 (можно сделать условную компилящию для динамических библиотек)

        section.slide
            h2 Компиляция динамически подгружаемой библиотеки
            ul
                li #[code gcc -std=с11 -fPIC -shared myfunc.o -olib.so]
                li #[code -shared] передается в компановщик (ld) и задает формат выходного файла
        
        section.slide
            h2 Использование динамически подгружаемой библиотеки
            ul
                li #[code gcc -O2 -Wall -Werror -std=c11 -c main.c]
                li #[code gcc main.o -L. -Wl,-rpath,. -o main -llib]
                li #[code -L.] - где искать #[code .so] библиотеку
                li #[code -llib] - компонавать с динамической библиотекой #[code liblib.so]
                li #[code -Wl,-rpath,.] - передать компановщику аргументы поиска пути исполняемым файлом
                li #[code LD_LIBRARY_PATH] - перменная окружения, вместо #[code -rpath]

        section.slide
            h2 Явная динамическая подгрузка библиотек
            ul
                li Заголовочный файл #[code dlfcn.h]
                li При компоновке надо собирать с #[code -ldl]
                li #[code(style="font-size: 15pt;") void *dlopen(const char *filename, int flags);]
                li #[code flags] - #[code RTLD_LAZY] либо #[code RTLD_NOW]
                li В случае ошибки возвращается #[code NULL], текст сообщения - #[code(style="font-size: 15pt;") char *dlerror(void);]
                li При повторном вызове dlopen увеличится счетчик на 1
        
        section.slide
            h2 Явная динамическая подгрузка библиотек
            ul
                li #[code(style="font-size: 15pt;") int dlclose(void *handle);]
                li #[code(style="font-size: 15pt;") void *dlsym(void *handle, const char *symbol);]
                li #[code NULL], если не найден символ, и указатель иначе
                li Можно получить список символов главной программы, передав #[code NULL] в #[code dlopen] (но тогда для компоновки #[code -rdynamic])

        div(class="progress")
        script(src="../../../common/shower/shower.min.js")