doctype html
html(lang="en")
    head
        title Архитектура компьютера и операционные системы
        meta(charset="utf-8")
        meta(http-equiv="x-ua-compatible", content="ie=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="../../../common/shower/themes/ribbon/styles/screen-16x10.css")
        style(type="text/css").
            .caption {
                color: #FFF;
            }
    body.shower.list
        header.caption
            h1 Архитектура компьютера и операционные системы
            p Семинар 8. Введение в ассемблер
        section.slide#cover
            h2 Семинар 8. Введение в ассемблер
            p Архитектура компьютера и операционные системы @ ВШЭ, 2018-2019
            img.cover(src="./img/cover.jpg", alt="")
            style(type="text/css").
                #cover h2 {
                    margin: 30px 0 0;
                    color: #FFF;
                    text-align: center;
                    font-size: 70px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p {
                    margin: 10px 0 0;
                    text-align: center;
                    color: #FFF;
                    font-style: italic;
                    font-size: 20px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p a {
                    color: #FFF;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
        section.slide
            h2 Введение в ассемблер
            ul
                li Мы будем использовать AT&T синтаксис для записи инструкций ассемблера x86
                li Для компиляции используем gcc - #[code gcc -m32 source.S]
                li Расширение для файлов исходного кода - #[code .S]
                li 64-битная версия системы может не поддерживать 32-битную архитектуру, лечение - #[code sudo apt-get install gcc-multilib]
                li Первое время разрешено использовать мини-библиотеку #[code simpleio_x86.S]
        
        section.slide
            h2 Регистры процессора
            ul
                li Сверхбыстрая память внутри процессора, предназначенная прежде всего для хранения промежуточных результатов вычисления или содержащая данные, необходимые для работы процессора
                li Для большинства операций значение должно быть загружено в один из регистров
                li Регистры общего назначения, сегментные регистры, регистр флагов, указатель команды 

        section.slide
            h2 Регистры общего назначения
            ul
                li #[code %eax]: Accumulator register — аккумулятор, применяется для хранения результатов промежуточных вычислений
                li #[code %ebx]: Base register — базовый регистр, применяется для хранения адреса (указателя) на некоторый объект в памяти
                li #[code %ecx]: Counter register — счетчик, его неявно используют некоторые команды для организации циклов
                li #[code %edx]: Data register — регистр данных, используется для хранения результатов промежуточных вычислений и ввода-вывода
        
        section.slide
            h2 Регистры общего назначения
            ul
                li #[code %esp]: Stack pointer register — указатель стека. Содержит адрес вершины стека
                li #[code %ebp]: Base pointer register — указатель базы кадра стека (англ. stack frame). Предназначен для организации произвольного доступа к данным внутри стека
                li #[code %esi]: Source index register — индекс источника, в цепочечных операциях содержит указатель на текущий элемент-источник
                li #[code %edi]: Destination index register — индекс приёмника, в цепочечных операциях содержит указатель на текущий элемент-приёмник
        
        section.slide
            h2 Регистры общего назначения
            img(src="./img/reg.png", style="height: 30%;")
            p Большая их часть может использоваться для хранения совершенно произвольных данных. Единственный случай, когда нужно учитывать, в какой регистр помещать данные — использование неявно обращающихся к регистрам команд. Такое поведение всегда чётко документировано

        section.slide
            h2 Регистр флагов
            ul
                li Нужно рассматривать как массив битов, за каждым из которых закреплено определённое значение
                li Неявно передаётся дополнительная информация, которая не записывается непосредственно в результат вычислений
                li #[code cf]: carry flag, флаг переноса (1 - был перенос из старшего бита результата, беззнаковое переполнение)
                li #[code zf]: zero flag, флаг нуля (1 - результат операции нулевой)
                li #[code of]: overflow flag, флаг переполнения (1 - было знаковое переполнение)

        section.slide
            h2 Указатель команды
            ul
                li #[code eip]: instruction pointer, указатель команды, регистр напрямую недоступен, изменяется неявно командами условных и безусловных переходов, вызова и возврата из подпрограмм

        section.slide
            h2 Стек вызовов
            ul
                li Стек является неотъемлемой частью архитектуры процессора и поддерживается на аппаратном уровне: в процессоре есть специальные регистры и команды для работы со стеком
                li Обычно стек используется для сохранения адресов возврата и передачи аргументов при вызове процедур, также в нём выделяется память для локальных переменных
                li Стек располагается в оперативной памяти
                li Стек растёт в сторону младших адресов

        section.slide
            h2 Стек вызовов
            img(src="./img/stack.png")

        section.slide
            h2 Работа со стеком
            ul
                li При операции #[code push АРГУМЕНТ] значение #[code %esp] уменьшается на размер элемента в байтах, новый элемент записывается по адресу, на который указывает #[code %esp]
                li При операции #[code pop АРГУМЕНТ] содержимое памяти по адресу, который записан в #[code %esp], записывается в регистр, а значение адреса в #[code %esp] увеличивается на размер элемента в байтах

        section.slide
            h2 Сегменты памяти
            img(src="./img/segments.png", style="height: 80%;")

        section.slide
            h2 Секции кода в ассемблере
            ul
                li Данные помещаются в секцию данных - директива #[code .data]
                li Команды (и, возможно, константные данные) помещаются в секцию кода - директива #[code .text]
                li Неинициализированные данные (зарезервированные) определяются специальной секции - директива #[code .bss]
                li Константные данные можно поместить в отдельную секцию (часть секции кода) - директива #[code .section .rodata]
        
        section.slide
            h2 Команды
            ul
                li Состоят из обозначения инструкции процессора и операндов
                li Операндов может не быть, или быть несколько (до 3х)
                li Конкретное значение, известное на этапе компиляции (непосредственные) - через #[code $]
                li Регистр - название регистра с префиксом #[code %]
                li Указатель на ячейку памяти - об этом в следующий раз
                li Неявные операнд - подразумевается инструкцией
        
        section.slide
            h2 Команды
            ul
                li Суффикс обозначения команды говорит о том, к какому количеству байт применяется операция
                li #[code b] (от англ. byte) — 1 байт
                li #[code w] (от англ. word) — 2 байта
                li #[code l] (от англ. long) — 4 байта
                li #[code q] (от англ. quad) — 8 байт

        section.slide
            h2 Команды
            ul
                li Важной особенностью всех команд является то, что они не могут работать с двумя операндами, находящимися в памяти. Хотя бы один из них следует сначала загрузить в регистр, а затем выполнять необходимую операцию

        section.slide
            h2 Данные
            ul
                li #[code .byte] — размещает каждое выражение как 1 байт
                li #[code .short] — 2 байта
                li #[code .int] — 4 байта
                li #[code .quad] — 8 байт
                li Аргументы этих директив — список выражений, разделенных запятыми
        
        section.slide
            h2 Данные
            ul
                li #[code .ascii "STR"] размещает строку STR. Нулевых байтов не добавляет
                li #[code .string "STR"] размещает строку STR, после которой следует нулевой байт (как в языке C)
                li У директивы #[code .string] есть синоним #[code .asciz] (z от англ. zero — ноль, указывает на добавление нулевого байта)
                li Строка-аргумент этих директив может содержать стандартные escape-последовательности
        
        section.slide
            h2 Неинициализированные данные
            ul
                li В скомпилированной программе секция #[code .bss] не занимает места
                li #[code .space  количество_байт]

        section.slide
            h2 Выравнивание
            ul
                li Выравнивание - забота программиста на ассемблере
                li #[code .p2align степень_двойки, заполнитель, максимум] - смещает адрес до необходимого выравнивания, заполняя указанными данными
                li Если нужно добавить больше, чем максимум байт, то выравнивание не выполняется

        section.slide
            h2 Метки и символы
            ul
                li Метка — это просто константа, значение которой — адрес
                li #[code hello_str: .string "Hello"]
                li Псевдометка #[code . ] - текущий адрес
                li Значение метки - всегда адрес. Символ - некоторая константа (в т.ч. метка - символ)
                li #[code .set    символ, выражение] - определить символ

        section.slide
            h2 Метки и символы
            ul
                li Программа #[code nm] позволяет посмотреть символы скомпилированного файла
                li Символ можно сделать глобальным (экспортируемым) с помощью директивы #[code .global]

        section.slide
            h2 Некоторые команды
            ul
                li Суффиксы - #[code b] - 1 байт, #[code w] - 2 байта, #[code l] - 4 байта, #[code q] - 8 байт
                li #[code mov ИСТОЧНИК, НАЗНАЧЕНИЕ]
                li Хотя бы один из аргументов - регистр

        section.slide
            h2 Некоторые команды
            ul
                li Операции со стеком - #[code push ЗНАЧЕНИЕ], #[code pop КУДА]
                li Стек считается выровненным по 4 байтам, хотя и можно положить 2 байта (но не 1)
                li #[code pushl %esp] положит на стек значение до изменения значения регистра
        section.slide
            h2 Некоторые команды
            ul
                li #[code inc ОПЕРАНД]
                li #[code dec ОПЕРАНД]
                li #[code add ИСТОЧНИК, ПРИЕМНИК]
                li #[code sub ИСТОЧНИК, ПРИЕМНИК]
                li #[code mul МНОЖИТЕЛЬ1] - второй множитель находится в #[code %eax], результат - в #[code %eax] и #[code %edx]
        
        section.slide
            h2 Некоторые команды
            ul
                li #[code loop МЕТКА] - уменьшить #[code %ecx] на 1, если получился 0 - идти дальше, нет - перейти на метку
                li #[code cmp ОПЕРАНД1, ОПЕРАНД2] - вычислить #[code ОПЕРАНД1 - ОПЕРАНД2] и установить флаги. Результат не сохраняется
                li #[code jz], #[code jnz], #[code jc], #[code jnc], #[code jo], #[code jno], #[code jg], #[code jge], #[code jl], #[code jle], #[code ja], #[code jae], #[code jb], #[code jbe] - условные переходы на основании значений флагов, аргумент - адрес (метка)
                li #[code jmp АДРЕС] - безусловный переход

        section.slide
            h2 Некоторые команды
            ul
                li #[code and], #[code or], #[code xor], #[code not] - логические операции, значение записывается в приемник (последний аргумент)
                li #[code test] - как команда #[and], но не сохраняет результат, а только устанавливает флаги
                li Рекомендуется использовать #[code test] вместо #[code cmp] для сравнения с нулем
                li #[code xor] часто применяют для обнуления регистров

        section.slide
            h2 Некоторые команды
            ul
                li #[code  sal/shl КОЛИЧЕСТВО_СДВИГОВ, НАЗНАЧЕНИЕ] - Shift Arithmetic Left / SHift logical Left 
                li #[code sar/shr] - аналогично для правого сдвига
                li Каждый «выдвигаемый» бит попадает в флаг cf (сохраняется последний)
                li #[code ror], #[code rol] - циклический сдвиг вправо/влево, в cf сохраняется последний выдвинутый бит
                li #[code rcr], #[code rcl] - циклический сдвиг с cf как дополнительный бит
        
        section.slide
            h2 Подпрограммы
            ul
                li #[code call МЕТКА] - вызов подпрограммы
                li #[code ret], #[code ret ЧИСЛО] - возврат из подпрограммы
                li Подпрограмма может изменить значения регистров, но обязана сохранить #[code %ebp], #[code %ebx] #[code %esi] #[code %edi], #[code %esp]. Сохранение остальных регистров - задача программиста
                li Возвращаемое значение - через регистр #[code %eax]
                li Подробности работы и передача параметров - в следующий раз

        div(class="progress")
        script(src="../../../common/shower/shower.min.js")