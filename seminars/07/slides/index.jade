doctype html
html(lang="en")
    head
        title Архитектура компьютера и операционные системы
        meta(charset="utf-8")
        meta(http-equiv="x-ua-compatible", content="ie=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="../../../common/shower/themes/ribbon/styles/screen-16x10.css")
        style(type="text/css").
            .caption {
                color: #FFF;
            }
    body.shower.list
        header.caption
            h1 Архитектура компьютера и операционные системы
            p Семинар 7. Тестирование программ. Указатели на функции
        section.slide#cover
            h2 Семинар 7. Тестирование программ. Указатели на функции
            p Архитектура компьютера и операционные системы @ ВШЭ, 2018-2019
            img.cover(src="./img/cover.jpg", alt="")
            style(type="text/css").
                #cover h2 {
                    margin: 30px 0 0;
                    color: #FFF;
                    text-align: center;
                    font-size: 70px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p {
                    margin: 10px 0 0;
                    text-align: center;
                    color: #FFF;
                    font-style: italic;
                    font-size: 20px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p a {
                    color: #FFF;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
        section.slide
            h2 Ошибки в программах
            ul
                li Ошибки в логике работы программы (алгоритме)
                li Ошибки технического плана (неправильная работа с памятью, неправильное использование стандартной библиотеки, ...)
        section.slide
            h2 Тестирование логики работы программы
            ul
                li Набор входных данных и правильных ответов
                li Входные данные должны покрывать весь набор условий задачи
                li Если нет четких ограничений на входные данные (большинство реальных программ) - в тестах должны быть мусорные данные
                li Тесты должны покрывать все ветки исполнения программы (code coverage)
        section.slide
            h2 Тестирование логики работы программы
            ul
                li Сформулированные выше правила не дают 100% гарантии на покрытие всех возможных случаев
                li В реальной жизни постоянный цикл (найдена ошибка) -> (написан тест) -> (ошибка исправлена)
        section.slide
            h2 Code coverage
            ul
                li Простой индикатор покрытия тестами
                li Позволяет найти участки кода, работа которых не проверяется тестами
                li Не проверяет покрытие тестами предметной области - гнаться только за code coverage нельзя
        section.slide
            h2 Fuzzing
            ul
                li Фа́ззинг (англ. fuzzing) — техника тестирования программного обеспечения, часто автоматическая или полуавтоматическая, заключающая в передаче приложению на вход неправильных, неожиданных или случайных данных.
                li Полезно для тестирования работы на некорректных данных
                li Однако, можно подавать случайные корректные данные на вход, считая правильный ответ простым способом
        section.slide
            h2 Тестирование работы с памятью
            ul
                li Санитайзеры (#[code -fsanitize=address])
                li #[code valgrind --leak-check=yes]
                li Запуск под дебагером (#[code gdb] или #[code lldb])
        section.slide
            h2 Тестирование программы
            ul
                li Проверяйте программу специальными инструментами на наличие проблем с памятью (и не только)
                li Тестируйте все ветки исполнения программы
                li Для пошагового исполнения программы используйте дебагер
                li Куча #[code printf] тоже бывает полезна!
        section.slide
            h2 Квалификатор #[code const]
            ul
                li Квалификатор #[code const] означает, что определяемый объект не может быть модифицирован
                li Переменная, описанная с квалификатором #[code const], не может быть использована в константных выражениях, которые, в частности, задают количество элементов массива
                li Правильный, хотя и не очень эстетичный способ определения констант периода компиляции в C — ключевое слово #[code enum]
        section.slide
            h2 Деклараторы
            ul
                li Конструкции, модифицирующие тип, такие как указатели, массивы, функции комбинируются в синтаксической конструкции, называемой «декларатором»
                li #[code double *ptr[10];]
                li Декларатор можно рассматривать как некоторое выражение над типом. В таком выражении есть три операции: [], (), *
        section.slide
            h2 Указатели на функции
            ul
                li #[code int (*pfunc)(int, int);] - указатель на функцию с двумя аргументами типа #[int] и возвращаемым значением типа #[int]
                li Любая переменная-указатель на функцию может принимать значение NULL
                li Указатель должен указывать на совместимую по сигнатуре функцию
                li Для имен функций автоматически выполняется неявное взятие адреса и разыменовывание
        section.slide
            h2 #[code typedef]
            ul
                li Позволяет дать типу (обычно, сложному) другое название
                li #[code typedef int* pint;] - #[code pint] - синоним для #[code int*]
                li Используется для обобщенных алгоритмов и не только
                li Лайфхак: #[code typedef struct A { ... } A] и можно не писать #[code struct] перед #[code A]

    
        div(class="progress")
        script(src="../../../common/shower/shower.min.js")