doctype html
html(lang="en")
    head
        title Архитектура компьютера и операционные системы
        meta(charset="utf-8")
        meta(http-equiv="x-ua-compatible", content="ie=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="../../../common/shower/themes/ribbon/styles/screen-16x10.css")
        style(type="text/css").
            .caption {
                color: #FFF;
            }
    body.shower.list
        header.caption
            h1 Архитектура компьютера и операционные системы
            p Семинар 3. Целые типы данных
        section.slide#cover
            h2 Семинар 3. Целые типы данных
            p Архитектура компьютера и операционные системы @ ВШЭ, 2018-2019
            img.cover(src="./img/cover.jpg", alt="")
            style(type="text/css").
                #cover h2 {
                    margin: 30px 0 0;
                    color: #FFF;
                    text-align: center;
                    font-size: 70px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p {
                    margin: 10px 0 0;
                    text-align: center;
                    color: #FFF;
                    font-style: italic;
                    font-size: 20px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p a {
                    color: #FFF;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
        section.slide
            h2 Представление беззнаковых чисел
            ul
                li Двоичная система счисления
                li Октет - 8 бит, Байт - минимальная адресуемая единица памяти (почти всегда 8 бит)
                li Беззнаковые целые - [0, 2^N - 1], N - число бит
                li #[code 0b00001000 = 2^3 = 8]
                li #[code 0b00001010 = 2^3 + 2 ^ 1 = 10]
        section.slide
            h2 Представление знаковых чисел
            ul
                li Прямой код - старший разряд знаковый (0 - положительное число, 1 - отрицательное), диапазон [−2^(n−1)+1;2^(n−1)−1]
                li Обратный код - старший разряд знаковый, если число отрицательное - инвертируются биты, диапазон [−2^(n−1)+1;2^(n−1)−1]
                li Дополнительный код - #[code -x = ~x + 1], используется чаще всего, диапазон [−2^(n−1);2^(n−1)−1]
        section.slide
            h2 Целочисленные типы данных
            img(src="img/types.png", style="width: 80%;")
        section.slide
            h2 Целочисленные типы данных
            ul
                li sizeof(char) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;= sizeof(long long)
                li sizeof(signed T) == sizeof(unsigned T)
                li Преобразование знаковое - беззнаковое созраняет битовое представление
                li Преобразование более "широкого" типа в более "узкий" отбрасывает старшие биты
                li Преобразование узкого типа в широкий - добивание #[code 0] или #[code 1]
        section.slide
            h2 Максимальные и минимальные значения типов
            ul
                li Определены в файле #[code limits.h]
                li CHAR_MIN, CHAR_MAX, SCHAR_MIN, SCHAR_MAX, UCHAR_MAX, ...
        section.slide
            h2 Типы фиксированной битности
            ul
                li Определены в файле #[code stdint.h]
                li.
                    #[code uint8_t], #[code uint16_t], #[code uint32_t], #[code uint64_t], #[code int8_t],
                    #[code int8_t], #[code int16_t], #[code int32_t], #[code int64_t], #[code intptr_t], #[code uintptr_t]
                li Некоторые типы могут отсутствовать на определенных платформах
                li В файле #[code inttypes.h] определены строки форматирования для фиксированных типов
                li #[a(href="https://en.cppreference.com/w/cpp/types/integer") Полный список]
        section.slide
            h2 Переполнение беззнаковых чисел
            ul
                li Поведение определено стандартом - все операции по модулю 2^N
                li #[code UINT_MAX + 1 = 0]
                li #[code 0 - 1U = UINT_MAX]
        section.slide
            h2 Переполнение знаковых чисел
            ul
                li Переполнение при #[code +], #[code -], #[code *], #[code /], #[code %], - undefined behaviour
                li Сдвиг на число бит, большее размера типа - UB
                li Сдвиг отрицательного числа влево - UB
                li Сдвиг на отрицательную величину - UB
        section.slide
            h2 Переполнение знаковых чисел
            ul
                li #[code -ftrapv] - #[code abort()] при знаковом переполнении
                li #[code -fwrapv] - выполнять знаковые операции по модулю 2^N (но без оптимизационных предположений)
                li #[code -fsanitize=undefined] - проверка на UB при работе программы
        section.slide
            h2 Контроль переполнения
            ul
                li Средствами языка можно реалировать проверку на переполнение (например, использовать более широкий тип), но в общем случае это замедляет выполнение программы
                li Некоторые компиляторы предлагают встроенные функции (intrinsic)
                li #[a(href="https://gcc.gnu.org/onlinedocs/gcc/Integer-Overflow-Builtins.html") Список для GCC]
                
    
        div(class="progress")
        script(src="../../../common/shower/shower.min.js")