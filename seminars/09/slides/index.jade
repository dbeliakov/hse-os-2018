doctype html
html(lang="en")
    head
        title Архитектура компьютера и операционные системы
        meta(charset="utf-8")
        meta(http-equiv="x-ua-compatible", content="ie=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="../../../common/shower/themes/ribbon/styles/screen-16x10.css")
        style(type="text/css").
            .caption {
                color: #FFF;
            }
    body.shower.list
        header.caption
            h1 Архитектура компьютера и операционные системы
            p Семинар 9. Введение в ассемблер. Часть 2
        section.slide#cover
            h2 Семинар 9. Введение в ассемблер. Часть 2
            p Архитектура компьютера и операционные системы @ ВШЭ, 2018-2019
            img.cover(src="./img/cover.jpg", alt="")
            style(type="text/css").
                #cover h2 {
                    margin: 30px 0 0;
                    color: #FFF;
                    text-align: center;
                    font-size: 70px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p {
                    margin: 10px 0 0;
                    text-align: center;
                    color: #FFF;
                    font-style: italic;
                    font-size: 20px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p a {
                    color: #FFF;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
        section.slide
            h2 Работа с памятью
            ul
                li Синтаксис: #[code смещение(база, индекс, множитель)]
                li Вычисленный адрес будет равен #[code база + индекс × множитель + смещение]
                li База и Индекс - регистры процессора
                li Множитель может принимать значения 1, 2, 4 или 8

        section.slide
            h2 Работа с памятью
            ul
                li #[code (%ecx)] - адрес находится в регистре #[code %eax]
                li #[code 4(%ecx)] - операнд находится по адресу #[code %ecx + 4] (удобно адресовать поля структур)
                li #[code foo(,%ecx,4)] - операнд находится по адресу #[code foo + %ecx × 4] (удобно итерироваться по массиву)

        section.slide
            h2 Подпрограммы
            ul
                li #[code call] - поместить в стек адрес следующей за call команды (адрес возврата) и перейти на метку
                li #[code ret [NUM]] - извлечь из стека новое значение регистра %eip [и если команде передан операнд NUM, %esp увеличивается на это число - убираются аргументы из стека]
        
        section.slide
            h2 Передача агрументов подпрограмме
            ul
                li Через регистры (и, если их много, через стек)
                li Через стек - кладем аргументы на стек (в прямом или обратном порядке - соглашение) и вызываем подпрограмму
        
        section.slide
            h2 Правила вызывающей стороны
            ul
                li Сохраняем регистры, которые не обязаны быть сохранены вызываемой стороной (если в них содержатся наши данные)
                li Записываем аргументы на стек в обратном порядке (например, сначала значение, потом форматную строку для #[code printf])
                li Вызываем подпрограмму
                li Удаляем агрументы функции (добавляем к стеку значение в байтах)
                li Восстанавливаем регистры из стека
        
        section.slide
            h2 Правила вызываемой стороны
            ul
                li Сохраняем значение #[code %ebp] на стеке
                li Устанавливаем значение #[code %esp] в #[code ebp] (новый кадр стека, можем легко обращаться к переданным аргументам)
                li Выделяем место на стеке для локальных переменных (уменьшить значение #[code %esp])
                li Сохраняем в стек регистры, которые мы обязаны сохранить (если их не меняем - можно не сохранять)

        section.slide
            h2 Правила вызываемой стороны
            img(src="./img/stack.png")

        section.slide
            h2 Правила вызываемой стороны
            ul
                li Восстанавливаем сохраненные регистры
                li Освобождаем место под локальные переменные (просто установка значения #[code %ebp] в #[code %esp])
                li Восстанавливаем #[code %ebp]
                li Возвращаемся при помощи #[code ret]

        section.slide
            h2 Пролог и эпилог
            ul
                li Пролог и эпилог - описанные выше правила, которым должна следовать каждая подпрограмма
                li Можно использовать #[code enter NUM1, NUM2] (NUM1 - размер памяти под локальные переменные, NUM2 - вложенность, почти всегда 0) и #[code leave] - однако, эти команды сейчас практически не используются

        div(class="progress")
        script(src="../../../common/shower/shower.min.js")