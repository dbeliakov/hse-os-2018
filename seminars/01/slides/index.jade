- function escape(block) {
  return block
    .replace( /&/g, '&amp;'  )
    .replace( /</g, '&lt;'   )
    .replace( />/g, '&gt;'   )
    .replace( /"/g, '&quot;' )
    .replace( /#/g, '&#35;'  )
    .replace( /\\/g, '\\\\'  )
    .replace( /\n/g, '\\n'   )
- }

doctype html
html(lang="en")
    head
        title Архитектура компьютера и операционные системы
        meta(charset="utf-8")
        meta(http-equiv="x-ua-compatible", content="ie=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="../../../common/shower/themes/ribbon/styles/screen-16x10.css")
        style(type="text/css").
            .caption {
                color: #FFF;
            }
    body.shower.list
        header.caption
            h1 Архитектура компьютера и операционные системы
            p Семинар 1. Основы работы в Linux
        section.slide#cover
            h2 Семинар 1. Основы работы в Linux
            p Архитектура компьютера и операционные системы @ ВШЭ, 2018-2019
            img.cover(src="./img/cover.jpg", alt="")
            style(type="text/css").
                #cover h2 {
                    margin: 30px 0 0;
                    color: #FFF;
                    text-align: center;
                    font-size: 70px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p {
                    margin: 10px 0 0;
                    text-align: center;
                    color: #FFF;
                    font-style: italic;
                    font-size: 20px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p a {
                    color: #FFF;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
        section.slide
            h2 О чем этот курс
            ul
                li Работа в UNIX-подобных системах
                li Низкоуровневое программирование на C
                li Принципы работы программ и ассемблер x86
                li Взаимодействие с OS Linux, системные вызовы
        section.slide
            h2 Организационные вопросы
            ul
                li Продолжительность курса - три модуля
                li После каждого семинара - домашнее задание на две недели (после - сдача со штрафом)
                li Раз в две недели - контрольная на одну пару
                li Вопросы и обсуждения в #[a(href="https://t-do.ru/joinchat/A1QZuRKSU4kST25wU-pwCA") Telegram]
        section.slide
            h2 Семейство UNIX
            ul
                li.
                    Согласно #[a(href="https://w3techs.com/technologies/overview/operating_system/all") W3Techs],
                    UNIX используется на 68.4% сайтов, Windows - на 31.6%
                li.
                    Из UNIX в 54.4% используется Linux, 0.9% - BSD, меньше 0.1% - Darwin, HP-UX, Solaris, Minix,
                    44.7% - Unknown
        section.slide
            h2 Семейство UNIX
            a(href="https://en.wikipedia.org/wiki/Unix", style="color: rgba(0,0,0,0);")
                img(src="./img/unix.svg", style="width: 100%; height: calc(100% - 100px); object-fit: contain;")
        section.slide
            h2 Установка Linux
            ul
                li Поставить основной/дополнительной системой
                li.
                    Установить на виртуальной машине #[a(href="https://www.virtualbox.org/") VirtualBox]
                    #[a(href="https://goo.gl/G10hmh") подготовленный образ] с Debian LINUX
        section.slide
            h2 Терминология
            ul
                li.
                    Файловая система - иерархию файлов и каталогов.
                    Не нужно называть каталоги "папками"
                li.
                    Все файлы равнозначны, понятия "расширение файла" не существует
                    (только добавляют суффикс для удобства)
                li.
                    В системе выполняется огромное количество процессов, они
                    могут быть запущены как непосредственно пользователем, так и одним из демонов,
                    которые запускаются при загрузке системы, и сами по себе являются процессами
        section.slide
            h2 Обозначения клавиатурных сочетаний
            ul
                li #[code C-Буква] - одновременное нажатие Ctrl и буквенной клавиши
                li #[code M-Буква] - одноваременное нажатие Alt и буквенной клавиши
                li #[code C-Буква1 Буква2] - сначала одновременное нажатие Ctrl и Буква1, затем отпустить клавишу Ctrl и нажать Буква2. Аналогично для клавиши Alt
        section.slide
            h2 Обозначения клавиатурных сочетаний
            ul
                li #[code C-Буква1 C-Буква2] - нажать Ctrl, затем нажать и отпустить Буква1, нажать и отпустить Буква2
                li #[code Клавиши F13...F15] - на PC-клавиатуре их нет. Их нажатие обеспечивается клавишей Shift и одной функциональных клавиш с номером F... меньше, в зависимости от терминала, на 10 или на 12
        section.slide
            h2 Удаленный вход по SSH
            ul
                li Для подключения по SSH необходимо использовать команду (для Linux/Mac) #[code ssh ИМЯ_ПОЛЬЗОВАТЕЛЯ@ИМЯ_ХОСТА]
                li Если имя пользователя совпадает с именем текущего пользователя, можно его опустить
                li Для Windows существуют специальные программы, например #[a(href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html") PuTTY]
                li После подключения необходимо ввести пароль
                li Указание порта для входа #[code ssh -p PORT ИМЯ_ПОЛЬЗОВАТЕЛЯ@ИМЯ_ХОСТА] (по умолчанию 22)
        section.slide
            h2 Использование нескольких экземпляров командной строки
            ul
                li При использовании текстового терминала, можно использовать сочетания клавиш от Alt+F1 до Alt+F6 для переключения между различными консолями
                li Использовать #[code tmux]
        section.slide
            h2 Самая полезная команда
            b #[code man РАЗДЕЛ ИМЯКОМАНДЫ]
            p.
                Например, #[code man ls] позволяет получить полную справку по программе #[code ls]
            ul
                li 1 - команды оболочки
                li 1p - команды оболочки; выводится документация только на ту функциональность, которая соответствует стандарту POSIX
                li 2 - системные вызовы ядра операционной системы
                li 3 - функции стандартной библиотеки Си
        section.slide
            h2 Самая полезная команда
            ul
                li 3p - Си-функции POSIX API
                li 4 - описания модулей ядра и системных устройств
                li 5 - описания форматов конфигурационных файлов
                li 6 - описания программ для X11
                li 7 - различные руководства, не попадающие под какую-либо классификацию
                li 8 - руководства по администрированию
                li n - руководства Tcl.

        section.slide
            h2 Работа с командной строкой
            ul
                li Промт (приветственная строка) - #[code ИМЯ_ПОЛЬЗОВАТЕЛЯ@ИМЯ_ХОСТА:ТЕКУЩИЙ_КАТАЛОГ>]
                li #[code /] - корневой каталог, #[code ~] - домашний каталог
                li . - текущий католог, .. - католог на уровень выше
                li.
                    #[code cd] - перейти в домашний каталог,
                    #[code cd PATH] - перейти по пути PATH (абсолютному или относительному),
                    #[code cd -] - перейти в предыдущий каталог
                li #[code TAB] - автодополнение имени
        section.slide
            h2 Иерархия файловой системы
            ul
                li #[code /bin] - выполняемые программы, предоставляющие минимально необходимый набор команд
                li #[code /boot] - файлы, необходимые для загрузки операционной системы
                li #[code /dev] - псевдо-файлы устройств
                li #[code /etc] - текстовые файлы конфигов
                li #[code /home] - домашние каталоги пользователей
                li #[code /lib], #[code /lib64] - минимально необходимый для работоспособности системы набор разделяемых библиотек
        section.slide
            h2 Иерархия файловой системы
            ul
                li #[code /lost+found] - файлы, которые по каким-либо причинам (например, неправильное выключение компьютера, или сбой диска) оказались вне какого-либо каталога, но их содержимое доступно
                li #[code /media] - каталог для монтирования сменных носителей
                li #[code /mnt] - каталог для монтирования общедоступных сетевых файловых систем или инородных разделов
                li #[code /opt] - каталог для установки сторонних приложений не из репозитория дистрибутива
        section.slide
            h2 Иерархия файловой системы
            ul
                li #[code /proc] - виртуальная файловая система с информацией о запущенных в системе процессах
                li #[code /root] - домашний каталог пользователя root
                li #[code /run] - содержит именованные сокеты и текстовые файлы с индентификаторами процесса для запущенных демонов
                li #[code /sbin] - выполняемые файлы для запуска пользователем root; у других пользователей этот каталог не включен в переменную окружения PATH
        section.slide
            h2 Иерархия файловой системы
            ul
                li #[code /srv] - файлы для хранения данных сетевыми службами
                li #[code /sys] - виртуальная файловая система для просмотра и изменения параметров ядра
                li #[code /tmp] - каталог для временных файлов
                li #[code /usr] - файлы большинства программ, которые устанавливаются из репозиториев дистрибутива
        section.slide
            h2 Иерархия файловой системы
            ul
                li #[code /usr/local] - аналогично /usr, но предназначен для установки программ самостоятельно из исходных текстов
                li #[code /var] - содержит данные различных демонов, например базы данных
        section.slide
            h2 Стандартные программы для управления файлами
            ul
                li #[code cp] - копирование файла или каталога (с опцией -R)
                li #[code mv] - переименование (перемещение) файла или каталога (с опцией -R)
                li #[code rm] - удаление файла или каталога (с опцией -r)
                li #[code ls] - вывод содержимого текущего каталога
                li #[code mkdir] - создание католока (-p - с промежуточными)
                li #[code touch] - создание файла
        section.slide
            h2 Стандартные программы для управления файлами
            ul
                li #[code cat] - вывести содержимое файла
                li #[code less] - постраничный вывод содержимого файла, с возможностью пролистывания в обе стороны
                li #[code head] - вывести первые строки файла
                li #[code tail] - вывести последние строки файла
                li #[code scp] - копирование файла по SSH
        section.slide
            h2 Установка программ из репозитория
            ul
                li #[code apt-get update] - обновить список доступных пакетов
                li #[code apt-cache search ИМЯ] - поиск пакета по имени
                li #[code apt-get install ИМЯ] - установка пакета
        section.slide
            h2 Работа с файлами
            ul
                li #[code mc] - Midnight Commander, #[a(href="http://mydebianblog.blogspot.com/2011/01/midnight-commander.html") команды и горячие клавиши]
                li #[code vim] - #[a(href="http://mydebianblog.blogspot.com/2012/03/vim.html") основы работы] или команда #[code vimtutor]
                li #[code nano] - #[a(href="https://help.ubuntu.ru/wiki/nano") основы работы]
                li Файловая система ВМ доступна по FTP: #[code "ftp://student@192.168.56.105/"]
        section.slide
            h2 Права доступа
            ul
                li #[code ls -li] - просмотр подробной информации о файлах
                li Три типа полномочий - чтения (r от read), записи (w от write) и выполнения (x от execution)
                li Исполняемый файл или нет определяется полномочиями выполнения
                li Три группы - полномочия пользователя, его группы и всех остальных
                li 9 бит, представляется как три цифры (rwxr-xr-- = 754)
        section.slide
            h2 Права доступа
            ul
                li #[code chmod] - управление правами доступа
                li #[code chmod (к_какой_группе_прав)(что_сделать_с_правами)(какие_права) над_каким_объектом]
                li #[code chmod (права) над_чем]
        section.slide
            h2 Исполняемые файлы
            ul
                li Должны быть права на выполнение файла
                li Бинарный файл начинается с байт #[code 0x7F 0x45 0x4C 0x46]. Этот формат называется ELF (Executable and Linkable Format)
                li.
                    Произвольный файл, в том числе текстовый, который начинается с текстовой строки вида #[code #!ИМЯ_ИНТЕРПРЕТАТОРА\n].
                    В этом случае, система запускает указанный интерпретатор, и передает ему выполняемый файл в качестве аргумента.
        sections.slide
            h2 Исполняемые файлы
            ul
                li Исполняемый файл можно запустить, указав путь до него (если в текущем каталоге - через ./
                li Если каталог находится в переменной окружения #[code PATH], то достаточно указать имя исполняемого файла
        section.slide
            h2 Исполняемые файлы
            ul
                li В ОС семейства UNIX принято сигнализировать о успешности/неуспешности завершения процесса кодом возврата
                li #[code 0] - процесс завершился успешно, иначе - неуспешно (код ошибки может нести в себе дополнительную информацию)
                li Узнать код возврата предыдущего процесса можно командой #[code echo $?]
        section.slide
            h2 Аргументы командной строки
            ul
                li В python аргументы командной строки получаются через список #[code sys.argv]
                li В C/C++ аргументы командной строки получаются через аргументы функции main
                li Первый элемент массива - название сама команда
        section.slide
            h2 Перенаправление вывода команд в файл
            ul
                li Команда echo выводит текст на #[i стандартный поток] вывода (stdout)
                li Вывод с stdout можно перенаправить в файл: #[code echo Hello > hello.txt]
                li Часто применяется при написании скриптов для создания простых текстовых файлов
                li Оператор #[code >] перезапишет содержимое файла, оператор #[code >>] допишет в конец файла
        section.slide
            h2 Поток вывода и поток ошибок
            ul
                li Еще один стандартный поток вывода - поток ошибок (stderr)
                li Оператор #[code >] по умолчанию пишет только из потока вывода
                li Можно указать файловый дескриптор #[code 1>out.txt 2>err.txt]
                li. 
                    Перенаправлять потоки можно не только в физически существующие файлы, но и в другие потоки
                    #[code >combined_out.txt 2>&1] - выведет оба потока в файл
        section.slide
            h2 Поток ввода
            ul
                li В поток ввода (stdin) поступает ввод с клавиатуры
                li Можно указать произвольный файл в качестве потока ввода: #[code &lt;input.txt]
                li Оператор #[code |] между командами соединяет стандартный поток вывода первой команды со стандартным потоком ввода второй команды, образуя канал передачи данных
        section.slide
            h2 Комбинации клавиш Ctrl+D и Ctrl+C
            ul
                li Если чтение происходит с клавиатуры, то принудительно закрыть входной поток можно с помощью комбинации клавиш #[code Ctrl+D]
                li Многие программы, работающие в режиме интерпретатора команд, заканчивают свою работу после закрытия потока
                li.
                    Для принудидельного завершения работы программы до того, как она выполнила свою работу, используется сочетание клавиш #[code Ctrl+C]
                    Программы могут перехватывать этот сигнал
        section.slide
            h2 grep
            ul
                li Выполняет фильрацию строк входного потока по регулярному выражению или входжению некоторого текста и выводит результат в поток вывода
                li #[code -F] - выполнять поиск простого текста, а не регулярного выражения
                li #[code -v] - инвертировать условие поиска на противоположное
                li #[code -q] - ничего не выводить на экран (если требуется только код возврата)
                li Код возврата: 0 - найдено, 1 -иначе, другие - ошибка
        section.slide
            h2 Подстановка вывода команд
            ul
                li Команда с необходимыми аргументами заключается в обратные одинарные кавычки (этот символ находится на PC-клавиатуре на одной клавише с буквой Ё)
                li Пример: #[code mkdir temp-`date +%Y%m%d-%H%M`]
        section.slide
            h2 BASH-скрипты
            ul
                li Фактически, набор команд для исполнения интерпретатором командной строки
                li Доступны все установленные CLI-программы (Command Line Interface)
                li Почти все, что можно сделать в командной строке, можно сделать в bash-скрипте
        section.slide
            h2 BASH-скрипты
            ul
                li Обычно, имеют расширение #[code .sh] или никакого
                li Есть много интерпретаторов, и много форматов скриптов (кроме bash, например, есть zsh и др.)
                li В начале скрипта можно добавить #[code #!/bin/sh] (в этом случае будет вызван дефолтный интерпретатор) или #[code #!/bin/bash]
        section.slide
            h2 Операторы
            ul
                li #[code ;] (точка с запятой) -- является разделителем между последовательно выполняемыми командами. Эквивалентен переносу строки
                li #[code &amp;] (амперсанд, Shift+7) -- ставится после команды (и ее аргументов). Команда будет выполнена в фоновом режиме, а интерпретатор продолжает свою работу
                li #[code &amp;&amp;] и #[code ||] -- аналогичны операторам в языке Си. Код завершения 0 - "истина"; все остальные - "ложь"
        section.slide
            h2 Операторы
            ul
                li #[code &gt;], #[code &gt;&gt;], #[code &lt;] и #[code |]  - операторы перенаправления потоков
        section.slide
            h2 Переменные
            ul
                li Объявления переменных #[code ИМЯ=ЗНАЧЕНИЕ] #[b без пробелов] (фактически, переменные окружения)
                li Переменные окружения часто используются для конфигурирования различных программ и скриптов
                li Доступ к переменным - #[code $ИМЯ] или #[code ${ИМЯ_С_ПОДЧЕРКИВАНИЕМ}] (если есть символ подчеркивания)
                li Сделать переменную доступной дочерним процессам #[code export ИМЯ=ЗНАЧЕНИЕ] или #[code export ИМЯ]
        section.slide
            h2 Специальные имена переменных
            ul
                li #[code $0] - имя команды текущего процесса
                li #[code $1] #[code $2], #[code $3] и т. д. - значения аргументов, переданных shell-скрипту
                li #[code $*] - список, состоящий из всех аргументов, передеанных shell-скрипту
                li #[code $#] - количество аргументов
                li #[code $?] - код возврата предыдущей выполненной команды
        section.slide
            h2 Ключевые слова и конструкции
            ul
                li #[code #] - комментарий
                li #[code `КОМАНДА`] (обратные одинарные кавычки) - вывод команды как текст
        section.slide
            h2 Проверка условия
            pre(style='white-space:pre;')
                | if ВЫРАЖЕНИЕ 1
                | then
                |     НАБОР КОМАНД 1
                | elif ВЫРАЖЕНИЕ 2
                |     НАБОР КОМАНД 2
                | else
                |     НАБОР КОМАНД 3
                | fi
        section.slide
            h2 Выбор вырианта
            pre(style='white-space:pre; font-size:14pt;')
                |  case ПЕРЕМЕННАЯ in
                |     ВАРИАНТ1|ВАРИАНТ2|ВАРИАНТ3)
                |     НАБОР КОММАНД 1
                |     ;;
                |     ВАРИАНТ4)
                |     НАБОР КОММАНД 2
                |     ;;
                |     *)
                |     НАБОР КОММАНД 3
                |     ;;
                | esac
        section.slide
            h2 Цикл while
            pre(style='white-space:pre;')
                | while УСЛОВИЕ
                | do
                |    НАБОР КОММАНД
                |done
        section.slide
            h2 Цикл for
            pre(style='white-space:pre;')
                | for ИМЯ in СПИСОК
                | do
                |     НАБОР КОММАНД
                | done
        section.slide
            h2 Команда #[code &#91;]
            ul
                li Предназначена для формирования логических выражений вида #[code &#91; ВЫРАЖЕНИЕ &#93;]
                li Команды #[b должны отделяться пробелом]
                li #[code -n СТРОКА] - истина, если длина строки ненулевая
                li #[code -z СТРОКА] - истина, если строка пустая
                li #[code СТРОКА1 = СТРОКА2] - истина, если строки равны
                li #[code СТРОКА1 != СТРОКА2] - истина, если строки различные
        section.slide
            h2 Команда #[code &#91;]
            ul
                li #[code ЧИСЛО1 -eq ЧИСЛО2] - числовое равенство
                li #[code ЧИСЛО1 -ne ЧИСЛО2] - числовое равенство
                li #[code ЧИСЛО1 -gt ЧИСЛО2] - ЧИСЛО1 &gt; ЧИСЛО2
                li #[code ЧИСЛО1 -ge ЧИСЛО2] - ЧИСЛО1 &gt;= ЧИСЛО2
                li #[code ЧИСЛО1 -lt ЧИСЛО2] - ЧИСЛО1 &lt; ЧИСЛО2
                li #[code ЧИСЛО1 -le ЧИСЛО2] - ЧИСЛО1 &lt;= ЧИСЛО2
        section.slide
            h2 Команда #[code &#91;]
            ul
                li #[code -e ИМЯФАЙЛА] - указанный путь существует
                li #[code -d ИМЯФАЙЛА] - указанный путь существует и является каталогом
                li #[code -f ИМЯФАЙЛА] - указанный путь существует и является обычным файлом
        section.slide
            h2 Команды #[code read] и #[code printf]
            ul
                li Команда read читает одну строку (до символа \n) из потока ввода, и сохраняет ее значение в указанной переменной
                li #[code read SOME_VAR]
                li Если поток данных завершился до ввода строки, то возвращается не нулевой код возврата
                li #[code printf] - форматированный вывод

        div(class="progress")
        script(src="../../../common/shower/shower.min.js")